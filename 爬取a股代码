from urllib.request import urlopen
from bs4 import BeautifulSoup
from openpyxl import load_workbook
from openpyxl import Workbook
import urllib
import re

list_url = 'http://quote.eastmoney.com/stocklist.html'
global hdr
global st_name, st_code
st_name, st_code = [], []
hdr = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',
       'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
       'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
       'Accept-Encoding': 'none',
       'Accept-Language': 'en-US,en;q=0.8',
       'Connection': 'keep-alive'}

def getUrl(url):
    req = urllib.request.Request(url, headers=hdr)
    html = urllib.request.urlopen(req)
    bs = BeautifulSoup(html.read(), 'html5lib')
    return bs

def split_code(text):
    e, f = text.split('(')
    st_name.append(e)
    st_code.append(f.split(')')[0])

wb = Workbook()
ws = wb.create_sheet('Sheet1')
ws['A1'].value = '股票代码'
ws['B1'].value = '股票名称'

st_list = getUrl(list_url).find_all('a')
for st in st_list:
    if '(' in st.get_text():
        split_code(st.get_text())

for i in range(2, len(st_code)):
    ws['A' + str(i)].value  = st_code[i-2]
    ws['B' + str(i)].value  = st_name[i-2]

wb.save('stocklist.xlsx')

————————————————————————————————————————————————————————————————————————

import tushare as ts
import os
from openpyxl import load_workbook
from openpyxl import Workbook

if os.path.exists("new_stock.xlsx"):
    pass
else:
    data = ts.get_stock_basics()
    data.to_excel('new_stock.xlsx')

wb = load_workbook("new_stock.xlsx")
ws = wb.get_sheet_by_name("Sheet1")
max_len = len(tuple(ws.rows)) + 1

def get_date(string):
    string = str(string)
    y = int(string[0:4])
    m = int(string[4:6])
    d = int(string[6:])
    return y, m, d

def first_month(code):
    hist_data = ts.get_hist_data(code)
    hist_data.to_excel(code+'.xlsx')
    share_wb = load_workbook(code+'.xlsx')
    share_ws = wb.get_sheet_by_name("Sheet1")
    share_max_len = len(tuple(share_ws.rows)) + 1
    share_values = [share_ws['D'+str(i)].value for i in range(share_max_len-30, share_max_len)]
    max_value = max(share_values)
    min_value = min(share_values)
    if max_value > 2*min_value:
        return True
        return code
    else:
        return False

def count_equity(code, flow):

    hist_data = ts.get_hist_data(code)
    hist_data.to_excel(code+'.xlsx')
    share_wb = load_workbook(code+'.xlsx')
    share_ws = wb.get_sheet_by_name("Sheet1")


    equity_wb = Workbook()
    equity_ws = equity_wb.get_sheet_by_name('Sheet')
    equity_max_len = len(tuple(equity_ws.rows)) + 2
    e = equity_max_len
    equity_ws['A1'].value = '股票代码'
    equity_ws['B1'].value = '当前价格'
    equity_ws['C1'].value = '流通市值'
    equity_ws['A'+str(e)].value = code
    equity_ws['B'+str(e)].value = share_ws['D2'].value
    equity_ws['C'+str(e)].value = share_ws['D2'].value * flow
    equity_wb.save('cixin.xlsx')


def kaiban(code):

    share_wb = load_workbook(code+'.xlsx')
    share_ws = wb.get_sheet_by_name("Sheet1")
    share_max_len = len(tuple(share_ws.rows)) + 1


for i in range(2, max_len):
    date = ws['P'+str(i)].value
    if date > 20170901:
        code = str(ws['A'+str(i)].value)
        flow = int(ws['F'+str(i)].value)
        name = str(ws['B'+str(i)].value)
        count_equity(code, flow)
